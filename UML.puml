@startuml

Local.left>IalmacenarInformacion

Persona --->Empleado

Persona --->Cliente

Ropa..>Talle



class Local {
-ropa: ArrayList<Ropa>;
-caja: Caja;
-empleados: HashSet<Empleado>;
-direccion: String;
-altura: int;
-horarios: String;
+agregarEmpleado(): void;
+eliminarEmpleado(): boolean;
+agregarRopa(): void;
+procesarCompra(): void;
+verificarDisponibilidad(): boolean;
}
class Ropa {
-stock: int;
-tipo: String; //remera/pantalon/etc
-talle: Talle;
-precio: float;
-colorRopa: String;
}
abstract class Persona{
-id: int;
-nombre: String;
-apellido: String;
-dni: String;
}
class Empleado{
-salario: float;
-disponible: boolean;
-horarios: String;
+equals(): void;
}
class Cliente{
-historial: float;
-deudas: float;

}
class Caja{
-cajaInicio: float;
-recaudacion: float;
-comprasDelDia: HashSet<Compra>;
+agregarCompra(): void;
}

class Compra {
-ordenDeCompra: String;
-cliente: Cliente;
-itemsComprados: ArrayList<Ropa>;
-total: float;
-empleadoAtencion: Empleado;
+comprobante(): String;
+equals(): boolean;
}

enum Talle {
XS,S,M,L,XL,XXL
}
interface IalmacenarInformacion {
//para Archivos y/o JSON
+guardar(): void;
+cargar(): void;
}

exception StockInsuficienteException{

}





@enduml